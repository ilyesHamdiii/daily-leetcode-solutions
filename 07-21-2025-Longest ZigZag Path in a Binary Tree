# https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree/description/?envType=study-plan-v2&envId=leetcode-75envId=leetcode-75
# Difficulty: Medium


# Time: O(n)
# Space: O(n)

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
""" Our algorithm is rooted in the idea of tracking the length of the ZigZag paths as we traverse the tree, using depth-first search (DFS). The current path length is maintained in two variables - left and right. At each node, if we go left, we update left by adding 1 to right and reset right to 0. Conversely, if we go right, we add 1 to left and reset left to 0. This way, we always start a new path with either (0,1) or (1,0).

Each ZigZag path length is continuously compared to a global maximum (self.maxi), and self.maxi is updated whenever a larger ZigZag path is found. At the end, self.maxi holds the length of the longest ZigZag path in the tree. """

class Solution:
    def longestZigZag(self, root: Optional[TreeNode]) -> int:
        self.maxi = 0

        def dfs(node, left, right):
            self.maxi = max(self.maxi, left, right)

            if node.left:
                dfs(node.left, right + 1, 0)

            if node.right:
                dfs(node.right, 0, left + 1)

        dfs(root, 0, 0)
        return self.maxi