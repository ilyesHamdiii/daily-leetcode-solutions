#https://leetcode.com/problems/maximum-fruits-harvested-after-at-most-k-steps/description/?envType=daily-question&envId=2025-08-03

# Difficulty:Hard

# Time: O(n*n)

# Space: O(n*n)
from typing import List
from bisect import bisect_left, bisect_right

class Solution:
    def maxTotalFruits(self, fruits: List[List[int]], startPos: int, k: int) -> int:
        positions = [f[0] for f in fruits]
        amounts = [f[1] for f in fruits]
        n = len(fruits)
        prefix = [0]
        for amt in amounts:
            prefix.append(prefix[-1] + amt)

        def range_sum(i: int, j: int) -> int:
            return prefix[j + 1] - prefix[i]

        max_fruits = 0
        left = 0

        for right in range(n):
            while left <= right:
                l_pos = fruits[left][0]
                r_pos = fruits[right][0]

                min_steps = min(
                    abs(startPos - l_pos) + (r_pos - l_pos),
                    abs(startPos - r_pos) + (r_pos - l_pos)
                )

                if min_steps <= k:
                    break
                left += 1

            if left <= right:
                max_fruits = max(max_fruits, range_sum(left, right))

        return max_fruits
